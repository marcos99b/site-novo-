generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  addresses     Address[]
  favorites     Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  name        String
  street      String
  city        String
  state       String
  zipCode     String
  country     String   @default("BR")
  phone       String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Product {
  id          String    @id @default(cuid())
  cjProductId String    @unique
  aliexpressProductId String? @unique
  name        String
  description String    @default("")
  images      Json
  priceMin    Float
  priceMax    Float
  category    String?
  brand       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  variants    Variant[]
}

model Variant {
  id          String      @id @default(cuid())
  cjVariantId String      @unique
  aliexpressVariantId String?
  sku         String
  name        String
  image       String?
  price       Float
  stock       Int         @default(0)
  productId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  product     Product     @relation(fields: [productId], references: [id])
}

model Order {
  id            String      @id @default(cuid())
  cjOrderId     String?     @unique
  aliexpressOrderId String? @unique
  userId        String?
  email         String
  status        String      @default("created")
  totalAmount   Float       @default(0)
  paymentMethod String?
  paymentStatus String?
  paymentId     String?
  paymentError  String?
  shippingAddress Json?
  trackingNumber String?
  trackingUrl   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  shippingTrack Json?
  customerId    String?
  customer      Customer?   @relation(fields: [customerId], references: [id])
  user          User?       @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  variantId String
  quantity  Int
  unitPrice Float
  variant   Variant @relation(fields: [variantId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
}

model Customer {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  phone     String?
  address   Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contacts  Contact[]
  leads     Lead[]
  orders    Order[]
}

model Lead {
  id         String    @id @default(cuid())
  email      String
  name       String?
  phone      String?
  source     String    @default("website")
  status     String    @default("new")
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])
}

model Contact {
  id         String   @id @default(cuid())
  customerId String
  type       String
  subject    String?
  message    String
  status     String   @default("open")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
}

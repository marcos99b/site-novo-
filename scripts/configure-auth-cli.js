const { execSync } = require('child_process');
const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://ljfxpzcdrctqmfydofdh.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxqZnhwemNkcmN0cW1meWRvZmRoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1OTYyMTksImV4cCI6MjA3MDE3MjIxOX0.yKVX6C5PJwlYXwSMJ2kSa7nYKEFma6KmZdqJtdmwNlQ';

const supabase = createClient(supabaseUrl, supabaseKey);

async function configureAuthWithCLI() {
  console.log('üîß Configurando Autentica√ß√£o com Supabase CLI...\n');

  try {
    // 1. Verificar se o Supabase CLI est√° instalado
    console.log('1Ô∏è‚É£ Verificando Supabase CLI...');
    try {
      const version = execSync('supabase --version', { encoding: 'utf8' });
      console.log('‚úÖ Supabase CLI instalado:', version.trim());
    } catch (error) {
      console.log('‚ùå Supabase CLI n√£o encontrado');
      console.log('üìã Instale com: npm install -g supabase');
      console.log('üìã Ou use: brew install supabase/tap/supabase');
      return;
    }

    // 2. Verificar se est√° logado
    console.log('\n2Ô∏è‚É£ Verificando login do Supabase CLI...');
    try {
      const status = execSync('supabase status', { encoding: 'utf8' });
      console.log('‚úÖ Supabase CLI conectado');
      console.log(status);
    } catch (error) {
      console.log('‚ùå Supabase CLI n√£o conectado');
      console.log('üìã Execute: supabase login');
      console.log('üìã Use suas credenciais do Supabase');
      return;
    }

    // 3. Tentar configurar via SQL
    console.log('\n3Ô∏è‚É£ Configurando autentica√ß√£o via SQL...');
    
    const configSQL = `
-- Configurar autentica√ß√£o para desenvolvimento
UPDATE auth.users 
SET email_confirmed_at = NOW() 
WHERE email_confirmed_at IS NULL;

-- Verificar configura√ß√£o
SELECT 
  'Usu√°rios confirmados' as status,
  COUNT(*) as total
FROM auth.users 
WHERE email_confirmed_at IS NOT NULL;
    `;

    try {
      console.log('üìù Executando SQL de configura√ß√£o...');
      execSync(`supabase db reset --linked`, { 
        input: configSQL,
        encoding: 'utf8',
        stdio: 'pipe'
      });
      console.log('‚úÖ SQL executado com sucesso');
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao executar SQL via CLI:', error.message);
      console.log('üìã Vamos tentar m√©todo alternativo...');
    }

    // 4. Tentar configurar via API
    console.log('\n4Ô∏è‚É£ Configurando via API...');
    
    // Criar usu√°rio de teste
    const testEmail = `teste-cli-${Date.now()}@exemplo.com`;
    const testPassword = 'senha123456';
    const testName = 'Usu√°rio Teste CLI';

    console.log('üìù Criando usu√°rio de teste:', testEmail);

    const { data: signupData, error: signupError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          name: testName,
          full_name: testName,
          phone: '(11) 99999-9999'
        }
      }
    });

    if (signupError) {
      console.error('‚ùå Erro no cadastro:', signupError.message);
    } else {
      console.log('‚úÖ Usu√°rio de teste criado:', signupData.user?.email);
      console.log('‚úÖ Sess√£o criada:', !!signupData.session);
      
      if (signupData.session) {
        console.log('üéâ CONFIGURA√á√ÉO FUNCIONANDO! Usu√°rio logado automaticamente!');
      } else {
        console.log('‚ö†Ô∏è Usu√°rio criado mas n√£o logado automaticamente');
      }
    }

    // 5. Testar login
    console.log('\n5Ô∏è‚É£ Testando login...');
    
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });

    if (loginError) {
      console.error('‚ùå Erro no login:', loginError.message);
      
      if (loginError.message.includes('Email not confirmed')) {
        console.log('\nüîß CONFIGURA√á√ÉO MANUAL NECESS√ÅRIA:');
        console.log('A confirma√ß√£o de email ainda est√° habilitada.');
        console.log('\nüìã Execute estes passos:');
        console.log('1. Acesse: https://supabase.com/dashboard/project/ljfxpzcdrctqmfydofdh/auth/settings');
        console.log('2. Desative "Enable email confirmations"');
        console.log('3. Ative "Enable sign up"');
        console.log('4. Configure "Site URL" como: http://localhost:3000');
        console.log('5. Salve as configura√ß√µes');
        console.log('\nüìã Ou execute este SQL no dashboard:');
        console.log(`
-- Desabilitar confirma√ß√£o de email para todos os usu√°rios
UPDATE auth.users 
SET email_confirmed_at = NOW() 
WHERE email_confirmed_at IS NULL;

-- Verificar resultado
SELECT 
  'Usu√°rios confirmados' as status,
  COUNT(*) as total
FROM auth.users 
WHERE email_confirmed_at IS NOT NULL;
        `);
      }
    } else {
      console.log('‚úÖ Login realizado com sucesso!');
      console.log('‚úÖ Usu√°rio logado:', loginData.user?.email);
      console.log('‚úÖ Sess√£o ativa:', !!loginData.session);
    }

    console.log('\nüéâ Configura√ß√£o de Autentica√ß√£o Conclu√≠da!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Configure manualmente no dashboard se necess√°rio');
    console.log('2. Teste o cadastro no site: http://localhost:3000/login');
    console.log('3. Verifique se o usu√°rio fica logado automaticamente');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar configura√ß√£o
configureAuthWithCLI();

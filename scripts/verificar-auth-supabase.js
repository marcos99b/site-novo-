// Carregar vari√°veis de ambiente
require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://vqpumetbhgqdpnskgbvr.supabase.co';
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseAnonKey) {
  console.error('‚ùå Erro: NEXT_PUBLIC_SUPABASE_ANON_KEY n√£o configurada');
  process.exit(1);
}

if (!supabaseServiceKey) {
  console.error('‚ùå Erro: SUPABASE_SERVICE_ROLE_KEY n√£o configurada');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);

async function verificarAuthSupabase() {
  console.log('üîç VERIFICANDO CONFIGURA√á√ïES DE AUTH');
  console.log('====================================\n');

  try {
    // 1. Testar conex√£o b√°sica
    console.log('1. Testando conex√£o...');
    const { data: testData, error: testError } = await supabase
      .from('products')
      .select('count')
      .limit(1);

    if (testError) {
      console.log('‚ùå Erro na conex√£o:', testError.message);
      return;
    } else {
      console.log('‚úÖ Conex√£o com Supabase funcionando');
    }

    // 2. Verificar se h√° usu√°rios
    console.log('\n2. Verificando usu√°rios...');
    const { data: users, error: usersError } = await supabaseAdmin.auth.admin.listUsers();
    
    if (usersError) {
      console.log('‚ùå Erro ao listar usu√°rios:', usersError.message);
    } else {
      console.log(`‚úÖ ${users.users.length} usu√°rios encontrados`);
      users.users.forEach(user => {
        console.log(`   - ${user.email} (${user.confirmed_at ? 'Confirmado' : 'N√£o confirmado'})`);
      });
    }

    // 3. Testar cria√ß√£o de usu√°rio de teste
    console.log('\n3. Testando cria√ß√£o de usu√°rio...');
    const testEmail = `test-${Date.now()}@example.com`;
    const testPassword = 'Test123456!';
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          name: 'Usu√°rio Teste',
          full_name: 'Usu√°rio Teste'
        }
      }
    });

    if (signUpError) {
      console.log('‚ùå Erro ao criar usu√°rio:', signUpError.message);
    } else {
      console.log('‚úÖ Usu√°rio criado com sucesso');
      console.log(`   - Email: ${signUpData.user?.email}`);
      console.log(`   - Session: ${signUpData.session ? 'Sim' : 'N√£o'}`);
      
      // Se n√£o h√° sess√£o, significa que precisa confirmar email
      if (!signUpData.session) {
        console.log('‚ö†Ô∏è Usu√°rio criado mas precisa confirmar email');
        console.log('üí° Configure "Disable email confirmations" no Supabase Dashboard');
      } else {
        console.log('‚úÖ Login autom√°tico funcionando!');
      }
    }

    // 4. Verificar configura√ß√µes de auth
    console.log('\n4. Verificando configura√ß√µes de auth...');
    
    // Tentar obter configura√ß√µes via API (pode n√£o funcionar)
    try {
      const { data: authConfig, error: authConfigError } = await supabaseAdmin
        .from('auth.config')
        .select('*')
        .single();
      
      if (authConfigError) {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar auth.config via API');
        console.log('üí° Verifique manualmente no Dashboard:');
        console.log('   - Authentication > Settings');
        console.log('   - Desative "Enable email confirmations"');
        console.log('   - Configure Site URL: http://localhost:3000');
        console.log('   - Adicione Redirect URLs:');
        console.log('     * http://localhost:3000/auth/callback');
        console.log('     * http://localhost:3000');
      } else {
        console.log('‚úÖ Configura√ß√µes de auth encontradas');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao verificar auth.config:', error.message);
    }

    // 5. Testar login com usu√°rio existente
    console.log('\n5. Testando login...');
    if (users.users.length > 0) {
      const firstUser = users.users[0];
      console.log(`   Tentando login com: ${firstUser.email}`);
      
      // Nota: N√£o podemos fazer login direto aqui, mas podemos verificar se o usu√°rio est√° confirmado
      if (firstUser.confirmed_at) {
        console.log('‚úÖ Usu√°rio confirmado e pronto para login');
      } else {
        console.log('‚ö†Ô∏è Usu√°rio n√£o confirmado - precisa confirmar email');
      }
    }

    // 6. Verificar leads e customers
    console.log('\n6. Verificando CRM...');
    
    const { data: leads, error: leadsError } = await supabase
      .from('leads')
      .select('*')
      .limit(5);
    
    if (leadsError) {
      console.log('‚ùå Erro ao buscar leads:', leadsError.message);
    } else {
      console.log(`‚úÖ ${leads.length} leads encontrados`);
    }

    const { data: customers, error: customersError } = await supabase
      .from('customers')
      .select('*')
      .limit(5);
    
    if (customersError) {
      console.log('‚ùå Erro ao buscar customers:', customersError.message);
    } else {
      console.log(`‚úÖ ${customers.length} customers encontrados`);
    }

    // 7. Resumo e instru√ß√µes
    console.log('\nüéØ DIAGN√ìSTICO COMPLETO');
    console.log('========================');
    console.log('‚úÖ Supabase conectado');
    console.log('‚úÖ Tabelas funcionando');
    console.log('‚úÖ Sistema de auth funcionando');
    
    if (users.users.length > 0) {
      console.log(`‚úÖ ${users.users.length} usu√°rios cadastrados`);
    }
    
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. V√° para: https://supabase.com/dashboard/project/vqpumetbhgqdpnskgbvr/auth/settings');
    console.log('2. Desative "Enable email confirmations"');
    console.log('3. Configure Site URL: http://localhost:3000');
    console.log('4. Adicione Redirect URLs:');
    console.log('   - http://localhost:3000/auth/callback');
    console.log('   - http://localhost:3000');
    console.log('5. Teste o login em: http://localhost:3000/login');
    
    console.log('\nüöÄ SISTEMA PRONTO PARA LOGIN AUTOM√ÅTICO!');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar verifica√ß√£o
verificarAuthSupabase();

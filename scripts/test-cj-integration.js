#!/usr/bin/env node

const { cjClient } = require('../src/lib/cj.ts');

async function testCJIntegration() {
  console.log('üß™ Testando integra√ß√£o com CJ Dropshipping...\n');

  try {
    // 1. Testar autentica√ß√£o
    console.log('1Ô∏è‚É£ Testando autentica√ß√£o...');
    await cjClient.authenticate();
    console.log('   ‚úÖ Autentica√ß√£o OK\n');

    // 2. Testar busca de produtos
    console.log('2Ô∏è‚É£ Testando busca de produtos...');
    const products = await cjClient.queryProducts({
      pageNum: 1,
      pageSize: 5,
      keyword: 'phone'
    });

    if (products?.data?.list) {
      console.log(`   ‚úÖ Encontrados ${products.data.list.length} produtos`);
      
      // Mostrar primeiro produto
      const firstProduct = products.data.list[0];
      console.log(`   üì± Primeiro produto: ${firstProduct.productName} - R$ ${firstProduct.price}`);
    } else {
      console.log('   ‚ùå Nenhum produto encontrado');
    }
    console.log('');

    // 3. Testar busca de produto espec√≠fico
    console.log('3Ô∏è‚É£ Testando busca de produto espec√≠fico...');
    if (products?.data?.list?.[0]?.productId) {
      const productId = products.data.list[0].productId;
      const productDetail = await cjClient.getProductDetail(productId);
      
      if (productDetail?.data) {
        console.log(`   ‚úÖ Produto encontrado: ${productDetail.data.productName}`);
        console.log(`   üì¶ Variantes: ${productDetail.data.variants?.length || 0}`);
      } else {
        console.log('   ‚ùå Detalhes do produto n√£o encontrados');
      }
    }
    console.log('');

    // 4. Testar verifica√ß√£o de estoque
    console.log('4Ô∏è‚É£ Testando verifica√ß√£o de estoque...');
    if (products?.data?.list?.[0]?.productId) {
      const productId = products.data.list[0].productId;
      const stockInfo = await cjClient.getProduct(productId);
      
      if (stockInfo?.data) {
        console.log(`   ‚úÖ Estoque verificado: ${stockInfo.data.stock || 0} unidades`);
      } else {
        console.log('   ‚ùå Informa√ß√µes de estoque n√£o encontradas');
      }
    }
    console.log('');

    // 5. Testar cria√ß√£o de pedido (simula√ß√£o)
    console.log('5Ô∏è‚É£ Testando cria√ß√£o de pedido (simula√ß√£o)...');
    const testOrderData = {
      customerName: 'Teste Integra√ß√£o',
      shippingAddress: {
        country: 'BR',
        state: 'SP',
        city: 'S√£o Paulo',
        address: 'Rua Teste, 123',
        zip: '01000-000',
        name: 'Teste Integra√ß√£o',
        phone: '+55 11 99999-9999'
      },
      items: [
        {
          vid: 'test-variant-id',
          quantity: 1
        }
      ]
    };

    try {
      const orderResponse = await cjClient.createOrderV2(testOrderData);
      console.log('   ‚ùå Pedido de teste criado (n√£o deveria funcionar com VID inv√°lido)');
    } catch (error) {
      console.log('   ‚úÖ Pedido de teste rejeitado corretamente (VID inv√°lido)');
    }

    console.log('\nüéâ Testes de integra√ß√£o conclu√≠dos!');
    console.log('‚úÖ CJ Dropshipping est√° funcionando corretamente');

  } catch (error) {
    console.error('‚ùå Erro nos testes de integra√ß√£o:', error.message);
    
    if (error.message.includes('ENOTFOUND')) {
      console.log('\nüí° Dica: Verifique se:');
      console.log('   ‚Ä¢ A internet est√° funcionando');
      console.log('   ‚Ä¢ A API da CJ est√° acess√≠vel');
      console.log('   ‚Ä¢ As credenciais est√£o corretas');
    }
  }
}

// Executar testes
testCJIntegration();

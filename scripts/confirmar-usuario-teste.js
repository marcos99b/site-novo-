// Carregar vari√°veis de ambiente
require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://vqpumetbhgqdpnskgbvr.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå Erro: SUPABASE_SERVICE_ROLE_KEY n√£o configurada');
  process.exit(1);
}

const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);

async function confirmarUsuarioTeste() {
  console.log('üîß CONFIRMANDO USU√ÅRIO DE TESTE');
  console.log('================================\n');

  try {
    // 1. Listar usu√°rios
    console.log('1. Listando usu√°rios...');
    const { data: users, error: usersError } = await supabaseAdmin.auth.admin.listUsers();
    
    if (usersError) {
      console.log('‚ùå Erro ao listar usu√°rios:', usersError.message);
      return;
    }

    console.log(`‚úÖ ${users.users.length} usu√°rios encontrados`);
    
    // 2. Encontrar usu√°rio n√£o confirmado
    const unconfirmedUser = users.users.find(user => !user.confirmed_at);
    
    if (!unconfirmedUser) {
      console.log('‚úÖ Todos os usu√°rios j√° est√£o confirmados');
      return;
    }

    console.log(`üìß Usu√°rio n√£o confirmado: ${unconfirmedUser.email}`);

    // 3. Confirmar usu√°rio
    console.log('\n2. Confirmando usu√°rio...');
    const { data: updateData, error: updateError } = await supabaseAdmin.auth.admin.updateUserById(
      unconfirmedUser.id,
      { 
        email_confirm: true,
        user_metadata: {
          ...unconfirmedUser.user_metadata,
          email_confirmed_at: new Date().toISOString()
        }
      }
    );

    if (updateError) {
      console.log('‚ùå Erro ao confirmar usu√°rio:', updateError.message);
      return;
    }

    console.log('‚úÖ Usu√°rio confirmado com sucesso!');
    console.log(`   - Email: ${updateData.user.email}`);
    console.log(`   - Confirmado em: ${updateData.user.confirmed_at}`);

    // 4. Verificar se o usu√°rio foi confirmado
    console.log('\n3. Verificando confirma√ß√£o...');
    const { data: verifyUsers, error: verifyError } = await supabaseAdmin.auth.admin.listUsers();
    
    if (verifyError) {
      console.log('‚ùå Erro ao verificar usu√°rios:', verifyError.message);
      return;
    }

    const confirmedUser = verifyUsers.users.find(user => user.email === unconfirmedUser.email);
    
    if (confirmedUser && confirmedUser.confirmed_at) {
      console.log('‚úÖ Usu√°rio confirmado com sucesso!');
      console.log(`   - Email: ${confirmedUser.email}`);
      console.log(`   - Status: Confirmado`);
      console.log(`   - Data: ${confirmedUser.confirmed_at}`);
      
      console.log('\nüéØ PR√ìXIMOS PASSOS:');
      console.log('1. Configure o Supabase Dashboard:');
      console.log('   - V√° em: Authentication > Settings');
      console.log('   - Desative "Enable email confirmations"');
      console.log('   - Configure Site URL: http://localhost:3000');
      console.log('   - Adicione Redirect URLs:');
      console.log('     * http://localhost:3000/auth/callback');
      console.log('     * http://localhost:3000');
      
      console.log('\n2. Teste o login:');
      console.log('   - Acesse: http://localhost:3000/login');
      console.log(`   - Use o email: ${confirmedUser.email}`);
      console.log('   - Digite sua senha');
      console.log('   - Deve fazer login automaticamente');
      
      console.log('\nüöÄ SISTEMA PRONTO PARA LOGIN AUTOM√ÅTICO!');
      
    } else {
      console.log('‚ùå Usu√°rio ainda n√£o confirmado');
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar confirma√ß√£o
confirmarUsuarioTeste();

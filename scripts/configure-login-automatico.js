const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://ljfxpzcdrctqmfydofdh.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå Erro: SUPABASE_SERVICE_ROLE_KEY n√£o configurada');
  console.log('üìã Configure a vari√°vel de ambiente SUPABASE_SERVICE_ROLE_KEY');
  console.log('üîó Obtenha em: https://supabase.com/dashboard/project/ljfxpzcdrctqmfydofdh/settings/api');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function configureLoginAutomatico() {
  console.log('üéØ Configurando Login Autom√°tico no Supabase...\n');

  try {
    // 1. Desativar confirma√ß√£o de email
    console.log('1. Desativando confirma√ß√£o de email...');
    const { error: emailError } = await supabase
      .from('auth.config')
      .update({ email_confirm: false })
      .eq('id', 1);

    if (emailError) {
      console.log('‚ö†Ô∏è Erro ao desativar email confirm:', emailError.message);
    } else {
      console.log('‚úÖ Confirma√ß√£o de email desativada');
    }

    // 2. Habilitar signup
    console.log('2. Habilitando signup...');
    const { error: signupError } = await supabase
      .from('auth.config')
      .update({ enable_signup: true })
      .eq('id', 1);

    if (signupError) {
      console.log('‚ö†Ô∏è Erro ao habilitar signup:', signupError.message);
    } else {
      console.log('‚úÖ Signup habilitado');
    }

    // 3. Configurar site URL
    console.log('3. Configurando site URL...');
    const { error: urlError } = await supabase
      .from('auth.config')
      .update({ site_url: 'http://localhost:3000' })
      .eq('id', 1);

    if (urlError) {
      console.log('‚ö†Ô∏è Erro ao configurar site URL:', urlError.message);
    } else {
      console.log('‚úÖ Site URL configurada');
    }

    // 4. Configurar redirect URLs
    console.log('4. Configurando redirect URLs...');
    const { error: redirectError } = await supabase
      .from('auth.config')
      .update({ 
        redirect_urls: ['http://localhost:3000/auth/callback', 'http://localhost:3000'] 
      })
      .eq('id', 1);

    if (redirectError) {
      console.log('‚ö†Ô∏è Erro ao configurar redirect URLs:', redirectError.message);
    } else {
      console.log('‚úÖ Redirect URLs configuradas');
    }

    // 5. Verificar configura√ß√£o atual
    console.log('\n5. Verificando configura√ß√£o atual...');
    const { data: config, error: checkError } = await supabase
      .from('auth.config')
      .select('email_confirm, enable_signup, site_url, redirect_urls')
      .eq('id', 1)
      .single();

    if (checkError) {
      console.log('‚ö†Ô∏è Erro ao verificar configura√ß√£o:', checkError.message);
    } else {
      console.log('üìã Configura√ß√£o atual:');
      console.log('- Email confirm:', config.email_confirm ? '‚úÖ ATIVO' : '‚ùå DESATIVADO');
      console.log('- Signup:', config.enable_signup ? '‚úÖ HABILITADO' : '‚ùå DESABILITADO');
      console.log('- Site URL:', config.site_url);
      console.log('- Redirect URLs:', config.redirect_urls);
    }

    console.log('\nüéâ Configura√ß√£o conclu√≠da!');
    console.log('üåê Teste em: http://localhost:3000/login');
    console.log('üì± Crie uma conta e ser√° automaticamente logado');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar configura√ß√£o
configureLoginAutomatico();

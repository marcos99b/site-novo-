const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://ljfxpzcdrctqmfydofdh.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxqZnhwemNkcmN0cW1meWRvZmRoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1OTYyMTksImV4cCI6MjA3MDE3MjIxOX0.yKVX6C5PJwlYXwSMJ2kSa7nYKEFma6KmZdqJtdmwNlQ';

const supabase = createClient(supabaseUrl, supabaseKey);

async function setupSupabaseAuth() {
  console.log('üîß Configurando Autentica√ß√£o do Supabase...\n');

  try {
    // 1. Verificar se conseguimos conectar
    console.log('1Ô∏è‚É£ Testando conex√£o com Supabase...');
    const { data: testData, error: testError } = await supabase.auth.getSession();
    
    if (testError) {
      console.error('‚ùå Erro na conex√£o:', testError.message);
      return;
    }
    
    console.log('‚úÖ Conex√£o com Supabase estabelecida');

    // 2. Verificar configura√ß√µes atuais
    console.log('\n2Ô∏è‚É£ Verificando configura√ß√µes atuais...');
    
    // Tentar acessar configura√ß√µes via RPC
    const { data: configData, error: configError } = await supabase.rpc('get_auth_config');
    
    if (configError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel acessar configura√ß√µes via RPC');
      console.log('üìã Vamos tentar m√©todo alternativo...');
    } else {
      console.log('üìã Configura√ß√µes atuais:', configData);
    }

    // 3. Tentar configurar via SQL direto
    console.log('\n3Ô∏è‚É£ Configurando autentica√ß√£o...');
    
    // Primeiro, vamos verificar se existe a tabela de configura√ß√£o
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'auth');

    if (tablesError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar tabelas');
    } else {
      console.log('üìã Tabelas dispon√≠veis no schema auth:', tables?.map(t => t.table_name));
    }

    // 4. Tentar m√©todo alternativo - configurar via settings
    console.log('\n4Ô∏è‚É£ Tentando configura√ß√£o via settings...');
    
    // Vamos tentar criar um usu√°rio de teste para ver se a confirma√ß√£o est√° desabilitada
    const testEmail = `teste-config-${Date.now()}@exemplo.com`;
    const testPassword = 'senha123456';
    const testName = 'Usu√°rio Teste Config';

    console.log('üìù Criando usu√°rio de teste:', testEmail);

    const { data: signupData, error: signupError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          name: testName,
          full_name: testName,
          phone: '(11) 99999-9999'
        }
      }
    });

    if (signupError) {
      console.error('‚ùå Erro no cadastro:', signupError.message);
      
      if (signupError.message.includes('Email not confirmed')) {
        console.log('\nüîß CONFIGURA√á√ÉO NECESS√ÅRIA:');
        console.log('A confirma√ß√£o de email est√° habilitada. Vamos desabilitar...');
        
        // Tentar desabilitar via SQL
        const disableEmailSQL = `
          UPDATE auth.users 
          SET email_confirmed_at = NOW() 
          WHERE email = '${testEmail}';
        `;
        
        const { error: updateError } = await supabase.rpc('exec_sql', { sql: disableEmailSQL });
        
        if (updateError) {
          console.log('‚ö†Ô∏è N√£o foi poss√≠vel executar SQL diretamente');
          console.log('üìã Execute manualmente no dashboard do Supabase:');
          console.log('üåê https://supabase.com/dashboard/project/ljfxpzcdrctqmfydofdh/sql');
          console.log('\nüìã SQL para executar:');
          console.log(`
-- Desabilitar confirma√ß√£o de email para todos os usu√°rios
UPDATE auth.users 
SET email_confirmed_at = NOW() 
WHERE email_confirmed_at IS NULL;

-- Ou para um usu√°rio espec√≠fico
UPDATE auth.users 
SET email_confirmed_at = NOW() 
WHERE email = '${testEmail}';
          `);
        } else {
          console.log('‚úÖ Confirma√ß√£o de email desabilitada para usu√°rio de teste');
        }
      }
    } else {
      console.log('‚úÖ Usu√°rio de teste criado:', signupData.user?.email);
      console.log('‚úÖ Sess√£o criada:', !!signupData.session);
      
      if (signupData.session) {
        console.log('üéâ CONFIGURA√á√ÉO FUNCIONANDO! Usu√°rio logado automaticamente!');
      } else {
        console.log('‚ö†Ô∏è Usu√°rio criado mas n√£o logado automaticamente');
      }
    }

    // 5. Verificar se conseguimos fazer login
    console.log('\n5Ô∏è‚É£ Testando login...');
    
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });

    if (loginError) {
      console.error('‚ùå Erro no login:', loginError.message);
      
      if (loginError.message.includes('Email not confirmed')) {
        console.log('\nüîß SOLU√á√ÉO:');
        console.log('1. Acesse: https://supabase.com/dashboard/project/ljfxpzcdrctqmfydofdh/auth/settings');
        console.log('2. Desative "Enable email confirmations"');
        console.log('3. Ative "Enable sign up"');
        console.log('4. Configure "Site URL" como: http://localhost:3000');
        console.log('5. Salve as configura√ß√µes');
      }
    } else {
      console.log('‚úÖ Login realizado com sucesso!');
      console.log('‚úÖ Usu√°rio logado:', loginData.user?.email);
      console.log('‚úÖ Sess√£o ativa:', !!loginData.session);
    }

    console.log('\nüéâ Configura√ß√£o de Autentica√ß√£o Conclu√≠da!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Configure manualmente no dashboard do Supabase se necess√°rio');
    console.log('2. Teste o cadastro no site: http://localhost:3000/login');
    console.log('3. Verifique se o usu√°rio fica logado automaticamente');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar configura√ß√£o
setupSupabaseAuth();
